#!/bin/bash

set -ex

PARALLEL=`which parallel`
if [ -z $PARALLEL ]
then
  echo "Needs GNU parallel"
  exit 1
fi

# This finds the location where yadfig itself is stored
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

DRY=0
QUIET=0

usage() {
  echo $0:
  echo "    -q: quiet, does not output progress info."
  echo "    -d: dry, does convert the images into thumbnails"
  echo "        and does not produce a zip file."
  echo "    -h: displays this message."
  exit 1;
}

while getopts "dqh" opt; do
  case $opt in
    d)
      DRY=1
      ;;
    q)
      QUIET=1
      ;;
    \?)
      usage $0
      exit 1
      ;;
    \h)
      usage $0
      exit 0
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

echo $DIR

mkdir -p .thumbnails

out='images.js'

echo "var items = [" > $out

for i in `ls *.jpg`
do
  width=$(identify $i | cut -d ' ' -f 3 | cut -d 'x' -f1)
  height=$(identify $i | cut -d ' ' -f 3 | cut -d 'x' -f2)
  echo -e "\t{"              >> $out
  echo -e "\t\tsrc:'$i',"    >> $out
  echo -e "\t\tw: $width,"   >> $out
  echo -e "\t\th: $height"   >> $out
  echo -e "\t},"             >> $out
  if [ $QUIET -ne 1 ] 
  then
    >&2 echo "$i" 
  fi
done

if [ $DRY -ne 1 ] 
then
  parallel convert {} -resize 450 .thumbnails/{} ::: *.jpg
fi

echo "];" >> $out

base="`basename $(pwd)`"

echo "var galleryName = \"$base\";" >> $out

if [ $DRY -ne 1 ] 
then
  cd ..
  rm -f $base.zip
  zip $base.zip $base/*.jpg
  mv $base.zip $base
  cd $base
fi


cp $DIR/gallery_index.html ./index.html
cp $DIR/download.svg .
cp -r $DIR/lib .
